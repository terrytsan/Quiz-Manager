@model QuizManager.UI.Models.QuizDetailsViewModel

@{
    ViewBag.Title = "QuizDetails";
}

<h1>@Model.Quiz.Name</h1>

@Html.HiddenFor(m => m.Quiz.Id)
@Html.HiddenFor(m => m.CurrentQuestion.Id)
@Html.Hidden("thisPageUrl", @Url.Action("QuizDetails", "QuizManagement", new {quizId = Model.Quiz.Id}, null))

<div class="row">
    <div class="col-md-4 mb-4">
        <h3 class="mb-4">
            Current Status
            @if (Model.IsAcceptingSubmissions)
            {
                <span id="statusBadge" class="badge badge-success ml-2">Enabled</span>
            }
            else
            {
                <span id="statusBadge" class="badge badge-danger ml-2">Disabled</span>
            }
        </h3>
        <div class="row mb-3" id="rowToggleSubmissions">
            <div class="col-7">
                @if (Model.IsAcceptingSubmissions)
                {
                    <button id="btnToggleSubmissions" class="btn btn-danger">Disable Submissions</button>
                }
                else
                {
                    <button id="btnToggleSubmissions" class="btn btn-success">Enable Submissions</button>
                }
            </div>
            <div class="col d-flex flex-row">
                <input id="enableSubmissionsDelay" type="number" step="1" min="0" class="form-control align-self-end" placeholder="Delay (s)" style="width: 85%"/>
            </div>
        </div>
        <div class="row mt-1">
            <div class="col">
                <div>
                    <input type="checkbox" id="chkResetDelay"/>
                    <label class="form-label-check" for="chkResetDelay">Reset delay each time</label>
                </div>
                <div>
                    <input type="checkbox" id="chkNoEnableDelay" checked/>
                    <label class="form-label-check" for="chkNoEnableDelay">No delay on enable</label>
                </div>
                <div>
                    <input type="checkbox" id="chkAutoEnableOnNextQ" checked/>
                    <label class="form-label-check" for="chkAutoEnableOnNextQ">Auto enable on next question</label>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-4 mb-4">
        <h3 class="mb-4">Current Question</h3>
        @if (Model.CurrentQuestion != null)
        {
            <div id="txtCurrentQuestion">Round @Model.CurrentQuestion.Round Question @Model.CurrentQuestion.QuestionNumber</div>
            <div id="rowChangeQuestion" class="row">
                <div class="col">
                    <button id="btnPrevQuestion" class="btn btn-primary my-3">Prev Question</button>
                    <button id="btnNextQuestion" class="btn btn-primary my-3">Next Question</button>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-7">
                    <p>This quiz has not started yet!</p>
                </div>
                <div class="col">
                    <button id="btnStartQuiz" class="btn btn-primary">Start Quiz</button>
                </div>
            </div>
        }
    </div>

    <div class="col-md-4">
        <div class="row mb-2">
            <div class="col d-flex flex-row">
                <h3>Participants</h3>
                <button class="btn btn-outline-secondary ml-3 mr-auto" data-toggle="collapse" data-target="#scoresTable">
                    <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-arrows-expand" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                        <path fill-rule="evenodd" d="M1 8a.5.5 0 0 1 .5-.5h13a.5.5 0 0 1 0 1h-13A.5.5 0 0 1 1 8zM7.646.146a.5.5 0 0 1 .708 0l2 2a.5.5 0 0 1-.708.708L8.5 1.707V5.5a.5.5 0 0 1-1 0V1.707L6.354 2.854a.5.5 0 1 1-.708-.708l2-2zM8 10a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 0 1 .708-.708L7.5 14.293V10.5A.5.5 0 0 1 8 10z"/>
                    </svg>
                </button>
                <div class="align-self-end">
                    <button class="btn btn-outline-primary" data-toggle="modal" data-target="#editParticipantModal">
                        <svg width="1em" height="1em" viewBox="0 0 16 16" class="bi bi-pencil" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                            <path fill-rule="evenodd" d="M12.146.146a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1 0 .708l-10 10a.5.5 0 0 1-.168.11l-5 2a.5.5 0 0 1-.65-.65l2-5a.5.5 0 0 1 .11-.168l10-10zM11.207 2.5L13.5 4.793 14.793 3.5 12.5 1.207 11.207 2.5zm1.586 3L10.5 3.207 4 9.707V10h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.293l6.5-6.5zm-9.761 5.175l-.106.106-1.528 3.821 3.821-1.528.106-.106A.5.5 0 0 1 5 12.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.468-.325z"/>
                        </svg>
                    </button>
                </div>
            </div>
        </div>

        <div id="scoresTable" class="table collapse mb-1">
            <table style="width: 100%">
                <tbody>
                @foreach (var participant in Model.Participants)
                {
                    <tr>
                        <td>@participant.Name</td>
                        <td>@participant.Score</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</div>
<hr>
<div class="row">
    <div class="col">
        <h2>Live Responses</h2>
        <ul id="liveParticipantResponseList" class="list-group list-group-horizontal d-flex flex-wrap flex-md-row">
        </ul>
    </div>
</div>
<hr>
@* List of Responses *@
<div class="row">
    <div class="col-md-12">
        <div class="row mb-2">
            <div class="col">
                <h3 class="m-0">Responses</h3>
            </div>
            <div class="col my-auto d-flex flex-column align-items-end">
                <div>
                    <input class="form-check-input" type="checkbox" value="" id="chkResponsesForSelectedQuestionOnly">
                    <label class="form-check-label" for="chkResponsesForSelectedQuestionOnly">This Question Only</label>
                </div>
            </div>
        </div>
        <div id="responsesList">
            @foreach (var response in Model.Responses)
            {
                <div class="card mb-3" style="@(response.Id == -1 ? "display:none;" : "")">
                    <div class="card-body p-3">
                        <div class="container-fluid p-0">
                            <div class="row no-gutters">
                                <div class="col-8">
                                    <div class="row">
                                        <div class="col-sm-4 no-gutters">
                                            <h5 id="@(response.Id)ResponseName" class="card-title m-0">@response.Name</h5>
                                        </div>
                                        <div class="col-sm-4">
                                            <div id="@(response.Id)ResponseQues" class="card-title mb-0">Round @response.Round Question @response.QuestionNumber</div>
                                        </div>
                                        <div class="col-sm-4">
                                            <div id="@(response.Id)ResponseTime" class="card-title mb-2">
                                                @if (response.Timestamp.Date == DateTime.Today)
                                                {
                                                    @response.Timestamp.ToString("HH:mm:ss.fff")
                                                }
                                                else
                                                {
                                                    @response.Timestamp
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-2 my-auto">
                                    <div class="flex d-flex justify-content-center">
                                        <h3>
                                            <span id="@(response.Id)ScoreBadge" class="badge badge-primary">@response.Points</span>
                                        </h3>
                                    </div>
                                </div>
                                <div class="col p-0 my-auto">
                                    <div class="row d-flex">
                                        <div class="col-md-6">
                                            <button id="@(response.Id)ScoreUpBtn" class="btn btn-sm btn-outline-success mb-2 float-right">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up" viewBox="0 0 16 16">
                                                    <path fill-rule="evenodd" d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z"/>
                                                </svg>
                                            </button>
                                        </div>
                                        <div class="col-md-6">
                                            <button id="@(response.Id)ScoreDownBtn" class="btn btn-sm btn-outline-danger float-right">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-down" viewBox="0 0 16 16">
                                                    <path fill-rule="evenodd" d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1z"/>
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col">
                                    <div id="@(response.Id)ResponseText">@response.ResponseText</div>
                                </div>
                            </div>
                        </div>

                    </div>
                </div>
            }
        </div>
    </div>
</div>

<div id="editParticipantModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Participants</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @foreach (var user in Model.AllUsers)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col">
                                    <div class="mr-2">@user.Name</div>
                                </div>
                                <div class="col d-flex flex-column align-items-end">
                                    @if (Model.Participants.Select(participant => participant.UserId).ToList().Contains(user.Id))
                                    {
                                        // Show remove button if they're already a participant
                                        <button id="@user.Id" class="btn btn-danger" onclick="handleEditParticipantBtnClick(this)">-</button>
                                    }
                                    else
                                    {
                                        // Show add button if they're not yet a participant
                                        <button id="@user.Id" class="btn btn-success" onclick="handleEditParticipantBtnClick(this)">+</button>
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section scripts
{
    @Scripts.Render("~/bundles/signalr")
    @Scripts.Render("/signalr/hubs")
    @Scripts.Render("~/bundles/sharedUpdates")
    @Scripts.Render("~/bundles/helperFunctions")
    <script>
        $(function (){
        	let questionIdField = $('#CurrentQuestion_Id');
        	let quizId = $('#Quiz_Id').val();
        	let gameStateHub = $.connection.gameStateHub;
        	let participate = $.connection.participateHub;
        	
        	// Function that the hub will call to update the current question text
        	gameStateHub.client.advanceQuestion = function (quizId, nextQuestion){
        	    updateCurrentQuestionText(nextQuestion);
        	    questionIdField.val(nextQuestion.Id);
        	    // Update the awaiting participants list
        	    getParticipantsForQuestionAndPopulateList(questionIdField.val(), $('#liveParticipantResponseList'), false);
        	    // Filter responses
        	    filterResponsesThisQuestionOnly();
            };
            
            // Function that the hub will call to show the end of quiz alert
            gameStateHub.client.showEndOfQuizAlert = () => showEndOfQuizAlert($('#rowChangeQuestion'));
            
            // Function that the hub will call when there a new response has been submitted
            participate.client.handleNewResponseSubmission = function (responseItem) {
            	// Clone the first card in the list
            	let responseList = $('#responsesList');
            	let firstCard = responseList.children(":first");
            	
            	let newCard = firstCard.clone();
            	let name = newCard.find("[id*='ResponseName']");
            	name.attr('id', responseItem.Id + 'ResponseName');
            	name.text(responseItem.Name);
            	let timestamp = newCard.find("[id*='ResponseTime']");
            	timestamp.attr('id', responseItem.Id + 'ResponseTime');
            	timestamp.text(convertDateTime(responseItem.TimestampString));
            	let question = newCard.find("[id*='ResponseQues']");
            	question.attr('id', responseItem.Id + 'ResponseQues');
            	question.text('Round ' + responseItem.Round + ' Question ' + responseItem.QuestionNumber);
            	let responseText = newCard.find("[id*='ResponseText']");
            	responseText.attr('id', responseItem.Id + 'ResponseText');
            	responseText.text(responseItem.ResponseText);
            	let scoreBadge = newCard.find("[id*='ScoreBadge']")
                scoreBadge.attr('id', responseItem.Id + 'ScoreBadge');
                scoreBadge.text(0);
            	let scoreUpBtn = newCard.find("[id*='ScoreUpBtn']")
            	scoreUpBtn.attr('id', responseItem.Id + 'ScoreUpBtn');
            	scoreUpBtn.click(handleResponsePointsBtnClick);
            	let scoreDownBtn = newCard.find("[id*='ScoreDownBtn']")
                scoreDownBtn.attr('id', responseItem.Id + 'ScoreDownBtn');
            	scoreDownBtn.click(handleResponsePointsBtnClick);

            	// Add the new card to the top of the list
            	responseList.prepend(newCard);
            	
            	filterResponsesThisQuestionOnly();
            	
                updateLiveParticipantResponsesList(responseItem, $('#liveParticipantResponseList'), false);
            };
            
            participate.client.updateParticipantScores = function (newScores) {
                refreshParticipantScoresTable('scoresTable', newScores);
            };
            
            gameStateHub.client.handleQuizStateChange = function (quizId, newStatus) {
                updateQuizStatusBadge(newStatus);
            }
            
            gameStateHub.client.startCountdown = function (quizId, length) {
                startCountdown(length, $('#rowToggleSubmissions'));
            }
            
            // Start the SignalR connection
            $.connection.hub.start()
            .done(function () {
            	console.log("Connected to hub");
            
            	$('#btnNextQuestion').click(function () {
            		gameStateHub.server.nextQuestion(quizId);
            		// Enable submissions if checkbox checked
            		let btnToggleSubmissions = document.getElementById('btnToggleSubmissions');
            		if ($('#chkAutoEnableOnNextQ').is(":checked") && btnToggleSubmissions.textContent === "Enable Submissions") {
                        toggleSubmissions.call(btnToggleSubmissions);
                    }
                });	
            	
            	$('#btnPrevQuestion').click(function () {
            		gameStateHub.server.prevQuestion(quizId);
                });	
            	
            	// Assign click handler to enable/disable submissions button
                $('#btnToggleSubmissions').click(function () {
                	// Call function passing button as context
                	toggleSubmissions.call(document.getElementById('btnToggleSubmissions'));
                });
                
                function toggleSubmissions() {
                    let enableSubmissionsDelayInput = $('#enableSubmissionsDelay');
                    let delay = parseInt(enableSubmissionsDelayInput.val()) * 1000;
                    
                    // Reset the delay value
                    if ($('#chkResetDelay').is(":checked")) {
                        enableSubmissionsDelayInput.val('');
                    }
                    
                    // Check if there is already a countdown occuring (button already pressed)
                    if (!$('#cdProgressBar').length) {
                        if (this.textContent === "Disable Submissions") {
                            // Call hub method
                            this.textContent = "Enable Submissions";
                            this.classList.remove('btn-danger');
                            this.classList.add('btn-success');
                            setState(false, delay);
                        } else {
                            // Call hub method
                            this.textContent = "Disable Submissions";
                            this.classList.remove('btn-success');
                            this.classList.add('btn-danger');
                            ($('#chkNoEnableDelay').is(":checked")) ? setState(true, NaN) : setState(true, delay);
                        }
                    }
                }
            })
            .fail (function (e){
            	console.log(e);
            });
            
            // Sets the state of the quiz in [delay]ms time
            function setState(newState, time)
            {
            	gameStateHub.server.startTimer(quizId, time);
            	setTimeout(function (){gameStateHub.server.setState(quizId, newState)},time);
            }
        	
        	// Assign onClick to StartQuiz button if it exists
        	let btnStartQuiz = document.getElementById('btnStartQuiz')
        	if (btnStartQuiz){
        		btnStartQuiz.onclick = function (){
        			console.log("Button clicked");
        		    $.ajax({
                        type: 'POST',
                        url: '/api/quizManagement/startQuiz',
                        // contentType: 'application/x-www-form-urlencoded',
                        contentType: "application/json",
                        data: quizId,
                        success: function () {
                            // Show success alert
                            console.log("Success");
                            // Update participant page
                            gameStateHub.server.startQuiz(quizId);
                            // Refresh the page
                            window.location = $('#thisPageUrl').val()
                            return false;
                        },
                        error: function (e) {
                            console.log("Error starting quiz." + e);
                        }
                    });
                }
            }
            
            // Assign onCLick handlers to up/down buttons in list of response cards
            $('#responsesList').find('button').click(handleResponsePointsBtnClick);
        	
        	function handleResponsePointsBtnClick() {
        		// Check which button was clicked
            	if (this.id.includes('Up')) {
            		let responseId = this.id.replace('ScoreUpBtn', '');
            		let scoreBadge = $('#' + responseId + 'ScoreBadge');
            		
            		// Increment the value
            		let newPoints = parseInt(scoreBadge.text()) + 1;
            		scoreBadge.text(newPoints);
            		// Call method in hub to update the response's points
            		participate.server.updateResponsePoints(quizId, responseId, newPoints);
            	} else if (this.id.includes('Down')) {
            		let responseId = this.id.replace('ScoreDownBtn', '');
            		let scoreBadge = $('#' + responseId + 'ScoreBadge');
            		
            		// Decrement the value if > 0
            		if (parseInt(scoreBadge.text()) !== 0) {
            			let newPoints = parseInt(scoreBadge.text()) - 1;
            			scoreBadge.text(newPoints);
            			// Call method in hub to update the response's points
            			participate.server.updateResponsePoints(quizId, responseId, newPoints);
            		}
            	}
            }
        	
            // Set on change handler for filter for question checkbox
        	$('#chkResponsesForSelectedQuestionOnly').change(filterResponsesThisQuestionOnly);
        	
        	function filterResponsesThisQuestionOnly() {
            	let checkbox = $('#chkResponsesForSelectedQuestionOnly');
            	$('#responsesList').children().each(function () {
            		// Get the question of the response 
            		let question = $(this).find("[id*='ResponseQues']");
            		let questionId = parseInt(question.attr('id').replace('ResponseQues', ''));
                    
            		// Filter the responses
            		if (checkbox.is(":checked") && $('#txtCurrentQuestion').text() !== question.text() || questionId === -1) {
            			$(this).hide();
            		} else {
            			$(this).show();
            		}
            	});
            }
        	
            // Populate the live participant responses list 
            getParticipantsForQuestionAndPopulateList(questionIdField.val(), $('#liveParticipantResponseList'), false);
        });
        
        function handleEditParticipantBtnClick(e) {
            let userId = e.id;
            
            if (e.innerHTML === "+") {
                // Add participant to quiz using quizid and user id
                $.ajax({
                    type: 'POST',
                    url: '/api/quizManagement/addParticipant',
                    data: {
                        UserId: userId,
                        QuizId: $('#Quiz_Id').val()
                    },
                    success: function () {
                    	// Update the live participants list
                        getParticipantsForQuestionAndPopulateList($('#CurrentQuestion_Id').val(), $('#liveParticipantResponseList'), false);
                        
                        // Update the scores list
                        getParticipantScores($('#Quiz_Id').val());
                        
                        // Flip the button
                        e.textContent = "-";
                        e.classList.remove("btn-success");
                        e.classList.add("btn-danger");
                    },
                    error: function (e) {
                        console.log("Error adding participant." + e);
                    }
                });
            }
            else if (e.innerHTML === "-") {
            	if (confirm("Are you sure you want to remove " + $(e).parent().prev().children().first().text() + "? This process is irreversible."))
            	{
                    // Remove the participant from the quiz
                   $.ajax({
                       type:'DELETE',
                       url: '/api/quizManagement/removeParticipant',
                       data: {
                           UserId: userId,
                           QuizId: $('#Quiz_Id').val()
                       },
                       success: function (){
                           // Refresh the page
                           window.location = $('#thisPageUrl').val()
                           return false;
                       },
                       error: function (e) {
                           console.log("Error removing participant." + e);	
                       }
                   });
            	}
            }
        }
        
        function getParticipantScores(quizId) {
            $.ajax({
                type: 'GET',
                url: '/api/quiz/participantScores',
                data: {
                    quizId: quizId
                },
                success: function (participantScores) {
                    refreshParticipantScoresTable('scoresTable', participantScores);
                }     
            });
        }
    </script>
}