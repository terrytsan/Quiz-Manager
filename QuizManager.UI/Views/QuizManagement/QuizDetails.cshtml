@model QuizManager.UI.Models.QuizDetailsViewModel

@{
    ViewBag.Title = "QuizDetails";
}

<h1>@Model.Quiz.Name</h1>

@Html.HiddenFor(m => m.Quiz.Id)
@Html.Hidden("thisPageUrl", @Url.Action("QuizDetails", "QuizManagement", new {quizId = Model.Quiz.Id}, null))

<div class="row">
    <div class="col-md-4">
        <h3>
            Current Status
            @if (Model.IsAcceptingSubmissions)
            {
                <span id="statusBadge" class="badge badge-success ml-2">Enabled</span>
            }
            else
            {
                <span id="statusBadge" class="badge badge-danger ml-2">Disabled</span>
            }
        </h3>
        @if (Model.CurrentQuestion != null)
        {
            <p id="txtCurrentQuestion">Round @Model.CurrentQuestion.Round Question @Model.CurrentQuestion.QuestionNumber</p>
            <button id="btnNextQuestion" class="btn btn-primary my-3">Next Question</button>
        }
        else
        {
            <div class="row">
                <div class="col-7">
                    <p>This quiz has not started yet!</p>
                </div>
                <div class="col">
                    <button id="btnStartQuiz" class="btn btn-primary">Start Quiz</button>
                </div>
            </div>
        }
        <div id="endOfQuizAlert" class="alert alert-danger collapse" role="alert">
            End of Quiz
        </div>
    </div>

    <div class="col-md-4">
        <div class="row mb-3" id="rowToggleSubmissions">
            @if (Model.IsAcceptingSubmissions)
            {
                <button id="btnToggleSubmissions" class="btn btn-danger">Disable Submissions</button>
            }
            else
            {
                <button id="btnToggleSubmissions" class="btn btn-success">Enable Submissions</button>
            }
            <label for="enableSubmissionsDelay" class="align-self-center mr-2 ml-4 mb-0">Delay:</label>
            <input id="enableSubmissionsDelay" type="number" step="1" min="0" class="form-control w-25 mr-4" placeholder="(s)"/>
        </div>
    </div>

    <div class="col-md-4">
        <div class="row mb-2">
            <div class="col">
                <h3>Participants</h3>
            </div>
            <div class="col d-flex justify-content-end">
                <button class="btn btn-primary" data-toggle="modal" data-target="#editParticipantModal">&#43</button>
            </div>

        </div>

        <ul id="participantsList" class="list-group">

            @foreach (var participant in Model.Participants)
            {
                <li class="list-group-item">
                    @participant.Name
                </li>
            }
        </ul>
    </div>
</div>
<hr>
<div class="row">
    <div class="col-md-12">
        <h3>Responses</h3>
        @* Table of responses *@
        <table id="responsesTable" class="table table-hover">
            <thead>
            <tr>
                <th>Round</th>
                <th>Question</th>
                <th>Name</th>
                <th>Response</th>
                <th>Timestamp</th>
                <th>Points</th>
            </tr>

            </thead>
            <tbody>
            @foreach (var response in Model.Responses)
            {
                <tr>
                    <td>@response.Round</td>
                    <td>@response.QuestionNumber</td>
                    <td>@response.Name</td>
                    <td>@response.ResponseText</td>
                    <td>@response.Timestamp</td>
                    <td>
                        <input id="@(response.Id)Score" type="number" step="1" value="@response.Points"/>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

<div id="editParticipantModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Edit Participants</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @foreach (var user in Model.AllUsers)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            @user.Name

                            @if (Model.Participants.Select(participant => participant.UserId).ToList().Contains(user.Id))
                            {
                                // Show remove button if they're already a participant
                                <button id="@user.Id" class="btn btn-danger" onclick="handleEditParticipantBtnClick(this)">-</button>
                            }
                            else
                            {
                                // Show add button if they're not yet a participant
                                <button id="@user.Id" class="btn btn-success" onclick="handleEditParticipantBtnClick(this)">+</button>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@section scripts
{
    @Scripts.Render("~/bundles/signalr")
    @Scripts.Render("/signalr/hubs")
    @Scripts.Render("~/bundles/sharedUpdates")
    @Scripts.Render("~/bundles/helperFunctions")
    <script>
        $(function (){
        	let quizId = $('#Quiz_Id').val();
        	let gameStateHub = $.connection.gameStateHub;
        	let participate = $.connection.participateHub;
        	
        	// Function that the hub will call to update the current question text
        	gameStateHub.client.advanceQuestion = function (quizId, nextQuestion){
        	    updateCurrentQuestionText(nextQuestion);
            };
            
            // Function that the hub will call to show the end of quiz alert
            gameStateHub.client.showEndOfQuizAlert = showEndOfQuizAlert;
            
            // Function that the hub will call when there a new response has been submitted
            participate.client.handleNewResponseSubmission = function (responseItem) {
            	//Create a new row (after header row)
            	let newRow = document.getElementById('responsesTable').insertRow(1);
            	
            	// Fill in the cells
            	let roundCell = newRow.insertCell(0);
            	roundCell.appendChild(document.createTextNode(responseItem.Round));
            	let questionCell = newRow.insertCell(1);
            	questionCell.appendChild(document.createTextNode(responseItem.QuestionNumber));
            	let nameCell = newRow.insertCell(2);
            	nameCell.appendChild(document.createTextNode(responseItem.Name));
            	let responseCell = newRow.insertCell(3);
            	responseCell.appendChild(document.createTextNode(responseItem.ResponseText));
            	let timestampCell = newRow.insertCell(4);
            	timestampCell.appendChild(document.createTextNode(convertDateTime(responseItem.Timestamp)));
            };
            
            gameStateHub.client.handleQuizStateChange = function (quizId, newStatus) {
                updateQuizStatusBadge(newStatus);
            }
            
            gameStateHub.client.startCountdown = function (quizId, length) {
                startCountdown(length, $('#rowToggleSubmissions'));
            }
            
            // Start the SignalR connection
            $.connection.hub.start()
            .done(function () {
            	console.log("Connected to hub");
            
            	$('#btnNextQuestion').click(function () {
            		gameStateHub.server.nextQuestion(quizId);
                });	
            	
            	// Assign click handler to enable/disable submissions button
                $('#btnToggleSubmissions').click(function () {
                	let delay = parseInt($('#enableSubmissionsDelay').val()) * 1000;
                	
                	// Check if there is already a countdown occuring (button already pressed)
                	if (!$('#cdProgressBar').length)
                    {
                        if (this.textContent === "Disable Submissions") {
                            // Call hub method
                            this.textContent = "Enable Submissions";
                            this.classList.remove('btn-danger');
                            this.classList.add('btn-success');
                            setState(false, delay);
                        } else {
                            // Call hub method
                            this.textContent = "Disable Submissions";
                            this.classList.remove('btn-success');
                            this.classList.add('btn-danger');
                            setState(true, delay);
                        }
                    }
                });
            })
            .fail (function (e){
            	console.log(e);
            });
            
            // Sets the state of the quiz in [delay]ms time
            function setState(newState, time)
            {
            	gameStateHub.server.startTimer(quizId, time);
            	setTimeout(function (){gameStateHub.server.setState(quizId, newState)},time);
            }
        	
        	// Assign onClick to StartQuiz button if it exists
        	let btnStartQuiz = document.getElementById('btnStartQuiz')
        	if (btnStartQuiz){
        		btnStartQuiz.onclick = function (){
        			console.log("Button clicked");
        		    $.ajax({
                        type: 'POST',
                        url: '/api/quizManagement/startQuiz',
                        // contentType: 'application/x-www-form-urlencoded',
                        contentType: "application/json",
                        data: quizId,
                        success: function () {
                            // Show success alert
                            console.log("Success");
                            // Refresh the page
                            window.location = $('#thisPageUrl').val()
                            return false;
                        },
                        error: function (e) {
                            console.log("Error starting quiz." + e);
                        }
                    });
                }
            }
            
            // Assign onChange handlers to points input box in response table
            $('#responsesTable').find("input").change(function () {
            	let responseId = this.id.replace('Score', '');
            	let newPoints = this.value;
            	
            	// Call method in hub to update the response's points
            	participate.server.updateResponsePoints(quizId, responseId, newPoints);
            });
        });
        
        function handleEditParticipantBtnClick(e) {
            let userId = e.id;
            
            if (e.innerHTML === "+") {
                // Add participant to quiz using quizid and user id
                $.ajax({
                    type: 'POST',
                    url: '/api/quizManagement/addParticipant',
                    data: {
                        UserId: userId,
                        QuizId: $('#Quiz_Id').val()
                    },
                    success: function (participants) {
                        // Call returns a list of all participants for this quiz
                        $('#participantsList').empty().append(
                            participants.map(participant =>
                                ('<li class="list-group-item">' + participant.Name + '</li>')
                            )
                        );
                        
                        // Flip the button
                        e.textContent = "-";
                        e.classList.remove("btn-success");
                        e.classList.add("btn-danger");
                    },
                    error: function (e) {
                        console.log("Error adding participant." + e);
                    }
                });
            }
        }
    </script>
}