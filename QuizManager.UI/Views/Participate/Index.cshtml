@model QuizManager.UI.Models.ParticipateViewModel

@{
    ViewBag.Title = "Participate";
}

<h2>Participate</h2>

<container>
    <h1>@ViewBag.UserId</h1>
    <div class="row">
        <form id="submitResponseForm" class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(m => m.SelectedQuiz, new {@class = "control-label"})
                @Html.DropDownListFor(m => m.SelectedQuiz, Model.AvailableQuizzes, new {id = "availableQuizzesDropDown", @class = "form-control", style = "max-width:100%"})
                @Html.ValidationMessageFor(m => m.SelectedQuiz, "", new {@class = "text-danger"})

            </div>

            <p id="txtCurrentQuestion"> </p>
            @* @Html.Hidden("questionId", "1") *@

            <div class="form-group">
                <label>Response</label>
                @Html.TextBoxFor(m => m.Response, new {id = "txtResponse", @class = "form-control w-100", autocomplete = "off", style = "max-width:100%"})
                @Html.ValidationMessageFor(m => m.Response, "", new {@class = "text-danger"})
            </div>
            <button class="btn btn-primary" type="submit">Submit</button>
            <button id="btnReset" class="btn btn-primary" type="reset">Reset</button>
            <p> </p>
        </form>

        <div class="col-md-4">
            <ul id="participantsList" class="list-group">
            </ul>
        </div>

        <div class="col-md-4">
            <table id="scoresTable" class="table">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Score</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td colspan="2">
                        <strong>Select a quiz to see scores</strong>
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
</container>

@section scripts
{
    @Scripts.Render("~/bundles/signalr")
    @Scripts.Render("/signalr/hubs")
    @Scripts.Render("~/bundles/sharedUpdates")
    @Scripts.Render("~/bundles/helperFunctions")
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        $(function () {
        	let availableQuizzesDropDown = $('#availableQuizzesDropDown');
        	let participate = $.connection.participateHub;
        	let gameStateHub = $.connection.gameStateHub;
        	let questionId = 0;
        	let selectedQuizId = 0;
        	
        	// Create a function that the hub will call to update participants list
        	participate.client.handleNewResponseSubmission = function (responseItem) {
        		updateLiveParticipantResponsesList(responseItem, $('#participantsList'), true)
            };
        	
        	gameStateHub.client.advanceQuestion = function (quizId, nextQuestion){
        		// Update the participants list
        		getParticipantsForQuestionAndPopulateList(nextQuestion.Id, $('#participantsList') ,true)
        		if (selectedQuizId == quizId) {
        			questionId=nextQuestion.Id;
        	        updateCurrentQuestionText(nextQuestion);
        	        //Retrieve the quiz status
        	        getIsAcceptingSubmissions(selectedQuizId);
                }
            };
        	
        	gameStateHub.client.handleQuizStateChange = function (quizId, newStatus) {
        		// Only execute if the currently selected quiz matches the state change
        		if (selectedQuizId == quizId) {
                	updateQuizStatusBadge(newStatus);
				}
            }
            
            gameStateHub.client.startCountdown = function (quizId, length) {
        		if (selectedQuizId == quizId) {
					startCountdown(length, $('#txtCurrentQuestion'));
				}
			}
        	
        	participate.client.updateParticipantScores = function (newScores) {
        		refreshParticipantScoresTable('scoresTable', newScores);
            };
        	
        	// Start the SignalR connection
        	$.connection.hub.start()
        	.done(function () {
        		console.log("Connected to hub");
        		
        		// Set up the submit button to send data to hub
        		$('#submitResponseForm').submit(function (e) {
                    e.preventDefault();
                    
                    // Dismiss the submission closed alert if not already
                    let submissionsAlert = $('#submissionsClosedAlert')
					if (submissionsAlert.length){
                    	submissionsAlert.alert('close');
                    }
                    // Validate form
                    if ($('#submitResponseForm').valid())
                    {
                        let txtResponse = $('#txtResponse');
                                                    
                        participate.server.submitResponse(questionId, txtResponse.val(), selectedQuizId)
						.done(function (isSuccessful) {
							// Clear validation messages
							$("#submitResponseForm input").clearErrors();

							if (!isSuccessful) {
                            	$('#submitResponseForm').append(
									'<div id="submissionsClosedAlert" class="alert alert-danger alert-dismissible fade show" role="alert">\n' +
                            		'&#128514; Submissions are closed.' +
                            		'<button type="button" class="close" data-dismiss="alert" aria-label="Close">\n' +
                            		'    <span aria-hidden="true">&times;</span>\n' +
                            		'  </button>' +
                            		'</div>');
                            }
						})
						.fail(function (e) {
							console.log(e);
						});
                        
                        // Clear the answer box and set focus
                        txtResponse.val('').focus();
                    }		           
                });
        		
        	    participate.server.getOwnUserId()
        	        .done(function (userId) {
        	            console.log("Got user ID:");
        	            console.log(userId);
                    })
                    .fail(function (e) {
                        console.log(e);	
                    });
            })
            .fail(function (e){
                console.log(e);	
            });
        	
        	availableQuizzesDropDown.change(dropDownOnChange)
        	function dropDownOnChange() {
                // Get the current game state (round and question number)
                selectedQuizId = availableQuizzesDropDown.val();
                $.ajax({
                    type: 'GET',
                    url: '/api/gameState/GetCurrentQuestion',
                    data: {
                        quizId: selectedQuizId
                    },
                    success: function (question) {
                        let txtCurrentQuestion = $('#txtCurrentQuestion');
                        if (question !== null) {
                            txtCurrentQuestion.removeClass("text-danger").text('Round ' + question.Round + ' Question ' + question.QuestionNumber);
                            // Update the questionId
                            questionId = question.Id;
                            // Get participant information for current question
                            getParticipantsForQuestionAndPopulateList(question.Id, $('#participantsList'), true);
                            getParticipantScores(selectedQuizId);
                            getIsAcceptingSubmissions(selectedQuizId);
                        } else {
                            txtCurrentQuestion.addClass("text-danger").text("This quiz hasn't started yet");
                            // Clear the list of participants
                            $('#participantsList').empty()
                        }
                    },
                    error: function () {
                        console.log("Error fetching current question for quiz");
                    }
                });
            }
            
            function getParticipantScores(quizId){
        		$.ajax({
                    type: 'GET',
                    url: '/api/quiz/participantScores',
                    data: {
                        quizId: quizId
                    },
                    success: function (participantScores) {
                    	refreshParticipantScoresTable('scoresTable', participantScores);
                    }     
                });
            }
            
			function getIsAcceptingSubmissions(quizId) {
				$.ajax({
					type: 'GET',
					url: '/api/gameState/isAcceptingSubmissions',
					data: {
						quizId: quizId
					},
					success: function (isAcceptingSubmissions) {
						handleQuizStateChange(isAcceptingSubmissions);
					}
				});
			 }
			
			// Updates the badge with the new state of the quiz
			function handleQuizStateChange(newState) {
			
				let txtCurrentQuestion = $('#txtCurrentQuestion');
				if (newState) {
					txtCurrentQuestion.append('<span id="statusBadge" class="badge badge-success ml-2">Enabled</span>')
				} else {
					txtCurrentQuestion.append('<span id="statusBadge" class="badge badge-danger ml-2">Disabled</span>')
				}
			}
			
			$.fn.clearErrors = function () {
				$(this).each(function() {
					$(this).trigger('reset.unobtrusiveValidation');
				});
			};
        });
    </script>
}