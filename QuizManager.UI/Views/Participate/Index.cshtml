@model QuizManager.UI.Models.ParticipateViewModel

@{
    ViewBag.Title = "Participate";
}

<h2>Participate</h2>

<container>
    <h1>@ViewBag.UserId</h1>
    <div class="container row">
        <form id="submitResponseForm" class="col-md-8">
            <div class="form-group">
                @Html.LabelFor(m => m.SelectedQuiz, new {@class = "control-label"})
                @Html.DropDownListFor(m => m.SelectedQuiz, Model.AvailableQuizzes, new {id = "availableQuizzesDropDown", @class = "form-control"})
            </div>

            <p id="txtCurrentQuestion"> </p>
            @* @Html.Hidden("questionId", "1") *@

            <div class="form-group">
                <label>Answer</label>
                @Html.TextBoxFor(m => m.Response, new {id = "txtResponse", @class = "form-control", autocomplete = "off"})
            </div>
            <button class="btn btn-primary" type="submit">Submit</button>
            <button id="btnReset" class="btn btn-primary" type="reset">Reset</button>
            <p> </p>
        </form>

        <div class="col-md-4">
            <ul id="participantsList" class="list-group">
            </ul>
        </div>

        <div class="col-md-4">
            <table id="scoresTable" class="table">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Score</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td colspan="2">
                        <strong>Select a quiz to see scores</strong>
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
</container>

@section scripts
{
    @Scripts.Render("~/bundles/signalr")
    @Scripts.Render("/signalr/hubs")
    @Scripts.Render("~/bundles/sharedUpdates")
    @Scripts.Render("~/bundles/helperFunctions")
    <script type="text/javascript">
        $(function () {
        	let availableQuizzesDropDown = $('#availableQuizzesDropDown');
        	let participate = $.connection.participateHub;
        	let gameStateHub = $.connection.gameStateHub;
        	let questionId = 0;
        	let selectedQuizId = 0;
        	
        	// Create a function that the hub will call to update participants list
        	participate.client.handleNewResponseSubmission = function (responseItem) {
        		$('#participantsList li').each(function (){
        			if ($(this).children(":first").children(":first").text() === responseItem.Name){
        			    $(this).addClass("list-group-item-success");
        			    // Add the timestamp to div
        			    $(this).children(":first").children().eq(1).text(convertDateTimeTimeOnly(responseItem.TimestampString));
        			    
        			    // Leave the .each() 
        			    return false;
        			}
                })
            };
        	
        	gameStateHub.client.advanceQuestion = function (quizId, nextQuestion){
        		// Update the participants list
        		getParticipantsForQuestion(nextQuestion.Id)
        		if (selectedQuizId == quizId) {
        	        updateCurrentQuestionText(nextQuestion);
                }
            };
        	
        	// Start the SignalR connection
        	$.connection.hub.start()
        	.done(function () {
        		console.log("Connected to hub");
        		
        		// Set up the submit button to send data to hub
        		$('#submitResponseForm').submit(function (e) {
                            e.preventDefault();
                            console.log("Submit button has been clicked");
                            let txtResponse = $('#txtResponse');
                            
                            participate.server.submitResponse(questionId, txtResponse.val());
                            
                            // Clear the answer box and set focus
                            txtResponse.val('').focus();
                        });
        		
        	    participate.server.getOwnUserId()
        	        .done(function (userId) {
        	            console.log("Got user ID:");
        	            console.log(userId);
                    })
                    .fail(function (e) {
                        console.log(e);	
                    });
            })
            .fail(function (e){
                console.log(e);	
            });
        	
        	availableQuizzesDropDown.change(dropDownOnChange)
        	function dropDownOnChange() {
                // Get the current game state (round and question number)
                selectedQuizId = availableQuizzesDropDown.val();
                $.ajax({
                    type: 'GET',
                    url: '/api/gameState/GetCurrentQuestion',
                    data: {
                        quizId: selectedQuizId
                    },
                    success: function (question) {
                        let txtCurrentQuestion = $('#txtCurrentQuestion');
                        if (question !== null) {
                            txtCurrentQuestion.removeClass("text-danger").text('Round ' + question.Round + ' Question ' + question.QuestionNumber);
                            // Update the questionId
                            questionId = question.Id;
                            // Get participant information for current question
                            getParticipantsForQuestion(question.Id);
                            getParticipantScores(selectedQuizId);
                        } else {
                            txtCurrentQuestion.addClass("text-danger").text("This quiz hasn't started yet");
                            // Clear the list of participants
                            $('#participantsList').empty()
                        }
                    },
                    error: function () {
                        console.log("Error fetching current question for quiz");
                    }
                });
            }
            
            // Get participant information for given question and populate participantsList
            function getParticipantsForQuestion(questionId){
                $.ajax({
                    type: 'GET',
                    url: '/api/question/participants',
                    data: {
                        questionId: questionId
                    },
                    success: function (participants) {
                        // Populate the list of participants
                        $('#participantsList').empty().append(
                            participants.map(participant =>
                                (participant.HasAnswered) ? (
                                	'<li class="list-group-item list-group-item-success">' +
                                	 '<div class="d-flex">' +
                                	  '<div class=mr-auto>' + participant.Name + '</div>' +
                                	   '<div>' + convertDateTimeTimeOnly(participant.LatestAnswerTime) + '</div>' +
                                	   '</div></li>') :
                                ('<li class="list-group-item">' +
                                 '<div class="d-flex">' +
                                  '<div class=mr-auto>' + participant.Name + '</div>' +
                                   '<div></div>' +
                                    '</div></li>')
                            )
                        );
                    },
                    error: function () {
                        console.log("Error fetching participants for question");
                    }
                });
            }
            
            function getParticipantScores(quizId){
        		$.ajax({
                    type: 'GET',
                    url: '/api/quiz/participantScores',
                    data: {
                        quizId: quizId
                    },
                    success: function (participantScores) {
                    	// Empty table
                        $('#scoresTable tbody').empty();
                        
                        participantScores.forEach(participantScore => {
                        	//Create a new row
                            let newRow = document.getElementById('scoresTable').insertRow(1);

                            // Fill in the cells
                            let nameCell = newRow.insertCell(0);
                            nameCell.appendChild(document.createTextNode(participantScore.Name));
                            let scoreCell = newRow.insertCell(1);
                            scoreCell.appendChild(document.createTextNode(participantScore.Score));
                        });
                    }     
                });
            }
        });
    </script>
}