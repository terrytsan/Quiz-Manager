@model QuizManager.UI.Models.ParticipateViewModel

@{
    ViewBag.Title = "Participate";
}

<h2>Participate</h2>

@Html.Hidden("userId", (object)ViewBag.UserId)

<container>
    <div class="row">
        <form id="submitResponseForm" class="col-md-4">
            <div class="form-group">
                @Html.LabelFor(m => m.SelectedQuiz, new { @class = "control-label" })
                @Html.DropDownListFor(m => m.SelectedQuiz, Model.AvailableQuizzes, new { id = "availableQuizzesDropDown", @class = "form-control form-select", style = "max-width:100%" })
                @Html.ValidationMessageFor(m => m.SelectedQuiz, "", new { @class = "text-danger" })

            </div>

            <p id="txtCurrentQuestion"> </p>
            @* @Html.Hidden("questionId", "1") *@

            <div class="form-group">
                <label>Response</label>
                @Html.TextBoxFor(m => m.Response, new { id = "txtResponse", @class = "form-control w-100", autocomplete = "off", style = "max-width:100%" })
                @Html.ValidationMessageFor(m => m.Response, "", new { @class = "text-danger" })
            </div>
            <button class="btn btn-primary" type="submit">Submit</button>
            <button id="btnReset" class="btn btn-primary" type="reset">Reset</button>
            <p> </p>
        </form>

        <div class="col-md-4">
            <ul id="participantsList" class="list-group">
            </ul>
        </div>

        <div class="col-md-4">
            <table id="scoresTable" class="table">
                <thead>
                <tr>
                    <th>Name</th>
                    <th>Score</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td colspan="2">
                        <strong>Select a quiz to see scores</strong>
                    </td>
                </tr>
                </tbody>
            </table>
        </div>
    </div>
</container>

<div id="showResponsesModal" class="modal fade">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Responses</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"> </button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col">
                        <div>
                            <input type="checkbox" id="chkFilterCurrentQuestion" checked/>
                            <label class="form-label-check" for="chkFilterCurrentQuestion">Current question only</label>
                        </div>

                        <div>
                            <input type="checkbox" id="chkFilterCurrentUser"/>
                            <label class="form-label-check" for="chkFilterCurrentUser">Show only mine</label>
                        </div>

                    </div>
                </div>
                <div id="responsesList"></div>
            </div>
        </div>
    </div>
</div>

@section scripts
{
    @{ await Html.RenderPartialAsync("_ValidationScriptsPartial"); }
    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/sharedSignalr.js"></script>
    <script src="~/js/helperFunctions.js"></script>
    <script type="text/javascript">
        $(function () {
			let connection = new signalR.HubConnectionBuilder().withUrl("/quizHub").withAutomaticReconnect().build();
			
			
        	let availableQuizzesDropDown = $('#availableQuizzesDropDown');
        	// let quizHub = $.connection.quizHub;
        	let questionId = 0;
        	let selectedQuizId = 0;
        	let chkFilterCurrentQuestion = $('#chkFilterCurrentQuestion');
			let chkFilterCurrentUser = $('#chkFilterCurrentUser');
        	
        	// Create a function that the hub will call to update participants list		
			connection.on("handleNewResponseSubmission", function(responseItem) {
				updateLiveParticipantResponsesList(responseItem, $('#participantsList'), true)
			});
        	
        	connection.on("advanceQuestion", function (quizId, nextQuestion) {
        		// Update the participants list
        		getParticipantsForQuestionAndPopulateList(nextQuestion.Id, $('#participantsList') ,true)
				questionId = nextQuestion.Id;
				updateCurrentQuestionText(nextQuestion);
				//Retrieve the quiz status
				getIsAcceptingSubmissions(selectedQuizId);
            });
        	
        	connection.on("startQuiz", function () {
        		// Call function to get current question
				getCurrentQuestion();
			});
        	
        	connection.on("handleQuizStateChange", function (newStatus) {
				updateQuizStatusBadge(newStatus);
				toggleShowResponsesBtn(newStatus);
            });
            
            connection.on("startCountdown", function (length) {
				startCountdown(length, $('#txtCurrentQuestion'));
			});
        	
        	connection.on("updateParticipantScores", function (newScores) {
        		refreshParticipantScoresTable('scoresTable', newScores);
            });
        	
        	connection.on("updateResponseScore", function (responseId, newScore) {
        		updateResponseScore(responseId, newScore);
			});
			
			connection.onreconnecting(error => {
				console.log(`Connection lost due to "${error}". Reconnecting...`);
			});
			
			connection.onreconnected(() => {
				console.log("Connection reestablished.");
			});
        	
			connection.onclose(error => {
				console.log(`Connection closed due to "${error}. Refresh page to continue.`);
			});
        	
        	// Start the SignalR connection
        	function startSignalRConnection() {
				// Disconnect from SignalR (remove self from any groups)
				connection.stop();
				connection.start().then(function() {
					// Join the SignalR group for the selected quiz
					connection.invoke("JoinQuizGroup", selectedQuizId);
				})
				.catch(function (e) {
					console.log(`Failed to connection to hub due to "${e}"`);
				});
			}
        	
        	// Set up the submit button to send data to hub
			$('#submitResponseForm').submit(function (e) {
				e.preventDefault();
				
				// Dismiss the submission closed alert if not already
				let submissionsAlert = $('#submissionsClosedAlert')
				if (submissionsAlert.length) {
					submissionsAlert.alert('close');
				}
				// Validate form
				if ($('#submitResponseForm').valid()) {
					let txtResponse = $('#txtResponse');
					
					connection.invoke("submitResponse", questionId, txtResponse.val(), selectedQuizId)
					.then(function (isSuccessful) {
						// Clear validation messages
						$("#submitResponseForm input").clearErrors();

						if (!isSuccessful) {
							$('#submitResponseForm').append(
								'<div id="submissionsClosedAlert" class="alert alert-danger alert-dismissible fade show" role="alert">\n' +
								'&#128514; Submissions are closed.' +
								'  <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close">\n' +
								'  </button>' +
								'</div>');
						}
					})
					.catch(function (e) {
						console.log(e);
					});
					
					// Clear the answer box and set focus
					txtResponse.val('').focus();
				}		           
			});
        	
        	availableQuizzesDropDown.change(function () {
        		getCurrentQuestion();
        		startSignalRConnection();
			});
        		
        	function getCurrentQuestion() {
                // Get the current game state (round and question number)
                selectedQuizId = parseInt(availableQuizzesDropDown.val());
                $.ajax({
                    type: 'GET',
                    url: '/api/gameState/GetCurrentQuestion',
                    data: {
                        quizId: selectedQuizId
                    },
                    success: function (question) {
                        let txtCurrentQuestion = $('#txtCurrentQuestion');
                        if (question !== null) {
                            txtCurrentQuestion.removeClass("text-danger").text('Round ' + question.round + ' Question ' + question.questionNumber);
                            // Update the questionId
                            questionId = question.id;
                            // Get participant information for current question
                            getParticipantsForQuestionAndPopulateList(question.id, $('#participantsList'), true);
                            getParticipantScores(selectedQuizId);
                            getIsAcceptingSubmissions(selectedQuizId);
                        } else {
                            txtCurrentQuestion.addClass("text-danger").text("This quiz hasn't started yet");
                            // Clear the list of participants
                            $('#participantsList').empty()
                        }
                    },
                    error: function () {
                        console.log("Error fetching current question for quiz");
                    }
                });
            }
            
            function getParticipantScores(quizId){
        		$.ajax({
                    type: 'GET',
                    url: '/api/quiz/participantScores',
                    data: {
                        quizId: quizId
                    },
                    success: function (participantScores) {
                    	refreshParticipantScoresTable('scoresTable', participantScores);
                    }     
                });
            }
            
			function getIsAcceptingSubmissions(quizId) {
				$.ajax({
					type: 'GET',
					url: '/api/gameState/isAcceptingSubmissions',
					data: {
						quizId: quizId
					},
					success: function (isAcceptingSubmissions) {
						initializeStatusBadge(isAcceptingSubmissions);
					}
				});
			 }
			
			// Initialize the status badge
			function initializeStatusBadge(newState) {
				let txtCurrentQuestion = $('#txtCurrentQuestion');
				txtCurrentQuestion.append('<span id="statusBadge" class="badge ms-2"></span>');
				txtCurrentQuestion.append('<a href="#" id="btnShowResponses" class="badge bg-info ms-2 fade-in-and-out" data-bs-toggle="modal" data-bs-target="#showResponsesModal">Show Responses</a>');
				let statusBadge = $('#statusBadge');
				
				if (newState) {
					statusBadge.addClass('bg-success');
					statusBadge.text('Enabled');
				} else {
					statusBadge.addClass('bg-danger');
					statusBadge.text('Disabled');
				}
				toggleShowResponsesBtn(newState);
			}
			
			// Reveal/hide show responses button depending on quiz status
			function toggleShowResponsesBtn(quizState) {
        		let btnShowResponses = $('#btnShowResponses');
        		if (quizState) {
        			btnShowResponses.hide();
				} else {
					btnShowResponses.show();
				}
			}
			
			// Called when modal opens
			$('#showResponsesModal').on('show.bs.modal', function() {
				let responsesList = $('#responsesList');
				responsesList.empty();
				$.ajax({
					type: 'GET',
					url: '/api/quiz/responses',
					data: {
						quizId: selectedQuizId
					},
					success: function (responses) {						
						responses.forEach(function (response) {
							responsesList.append(
								`<div id="${response.Id}ResponseCard" class="card mb-3">
									<div class="card-body p-3">
										<input type="hidden" id="">
										<div class="row">
											<div class="col-9">
												<div class="row">
													<div id="${response.userId}ResponseUser" class="col">${response.name}</div>
    												<div class="col">${convertDateTimeTimeOnly(response.timestamp + 'Z')}</div>
    												<div id="${response.questionId}ResponseQues" class="col">Round ${response.round} Question ${response.questionNumber}</div>
												</div>
											</div>
											<div class="col my-auto">
												<div class="flex d-flex justify-content-center">
													<h3>
														<span class="badge bg-primary">
															<div id="${response.id}ResponseScoreBadgeText">${response.points}</div>
														</span>
													</h3>
												</div>
											</div>
										</div>
										<div class="row mt-2">
											<div class="col">
												<div>${response.responseText}</div>
											</div>
										</div>
									</div>
								</div>`
							);
						});
						filterResponsesList();
					},
					error: function (xhr) {
						let errorMessage = JSON.parse(xhr.responseText).Message;
						if (errorMessage === "Quiz still enabled.") {
							responsesList.append('<div class="alert alert-danger" style="text-align: center">Quiz is enabled. Ask to disable submissions to view responses.</div>')
						}
					}
				});
			});
        	
        	chkFilterCurrentQuestion.change(filterResponsesList);
        	chkFilterCurrentUser.change(filterResponsesList);
        	
        	// Applies the filters in the check boxes
        	function filterResponsesList() {
        		$('#responsesList').children().each(function () {
        			$(this).show();
        			let responseQuesId = parseInt($(this).find("[id*='ResponseQues']").attr('id').replace('ResponseQues', ''));
        			let responseUserId = $(this).find("[id*='ResponseUser']").attr('id').replace('ResponseUser', '');
        			
        			if (chkFilterCurrentQuestion.is(":checked") && responseQuesId !== questionId) {
						$(this).hide();
					}
        			if (chkFilterCurrentUser.is(":checked") && responseUserId !== $('#userId').val()) {
						$(this).hide();
					}
				});
			}
			
			// Update the response's score in the modal
			function updateResponseScore(responseId, newScore) {
            	// Try and get the response Card
            	let scoreBadge = $('#' + responseId + 'ResponseScoreBadgeText');
            	if (scoreBadge.length !== 0) {
            		let currentPoints = parseInt(scoreBadge.text());
            		let newPoints = parseInt(newScore);
            
            		// Check which animation to use
            		scoreBadge.removeClass('fade-in-up fade-in-down');
            		if (newPoints > currentPoints) {
            			setTimeout(function () {
            				scoreBadge.addClass('fade-in-down');
            				scoreBadge.text(newPoints);
            			}, 1);
            		} else {
            			setTimeout(function () {
            				scoreBadge.addClass('fade-in-up');
            				scoreBadge.text(newPoints);
            			}, 1);
            		}
            	}
            }
			
			$.fn.clearErrors = function () {
				$(this).each(function() {
					$(this).trigger('reset.unobtrusiveValidation');
				});
			};
        });
    </script>
}